---
title: "Flagging Inland Data - Rolling SD (ALL CMAR DATA)"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = FALSE)

library(tidyverse)
library(data.table)
library(qaqcmar)
library(here)
library(ggplot2)
library(sensorstrings)
library(summaryplots)
library(plotly)
library(DT)
library(leaflet)
library(zoo)

#Load CMAR river data
dat_all1 <- readRDS(here("data/2024-09-05_inland_data_prelim_qc.rds"))

dat_new <- readRDS(here("data/2024-10-29_inland_data_no_qc.rds")) %>%
  mutate(county = "river_data")


dat_all <- rbind(dat_all1, dat_new)


st_locations <- dat_all %>%
  distinct(latitude, .keep_all = TRUE)

list <- unique(dat_all$station)


dt_options <- list(
  dom = 'ft',
  paging = FALSE,
  searching = TRUE,
  scrollY = "500px",
  scrollX = "500px",
  columnDefs = list(list(className = 'dt-center', targets = "_all"))
)


period_hours <- 24
max_interval_hours <- 2
align_window <- "center"



# run one time
threshold_value_sd <- 2.04

newrow_sd <- list(qc_test = "rolling_sd",
                  variable = "temperature_degree_c",
                  county = "river_data",
                  month = "NA",
                  sensor_type = "NA",
                  threshold = "rolling_sd_max",
                  threshold_value = threshold_value_sd)

thresholds <- thresholds %>% 
  filter(qc_test == c("rolling_sd"), variable == "temperature_degree_c") %>%
  rbind(newrow_sd)


```

# Inland Parameters: Explore Thresholds

## Summary

CMAR has collected data on several inland bodies of freshwater in Nova Scotia through the wild Atlantic salmon river monitoring project. In addition, CMAR has data collected on several freshwater lakes (e.g. Piper Lake), which is currently published through the Water Quality branch of the [Coastal Monitoring Program](https://cmar.ca/coastal-monitoring-program/#station). 

CMAR intends to process and republish all inland data under a new "Inland" branch of the Coastal Monitoring Program. Data will be processed in a similar manner to the water quality data, and data flags will be applied using the [qaqcmar](https://github.com/dempsey-CMAR/qaqcmar) package. 

It is suspected that sensors on some rivers were out of the water for some period of time during the deployment. Data flagging efforts will flag data for periods of time sensors were suspected to be exposed. During the periods in which sensors were exposed to air, recorded temperatures fluctuate more quickly than when sensors are submerged. 

The purpose of this document is to help CMAR determine appropriate data flagging tests and thresholds for freshwater (inland) data. We do not currently have enough freshwater data to conduct as thorough an analysis as was done on the saltwater water quality data to develop tests and thresholds, so thresholds may be picked in more subjective ways.



##### Waterbodies in dataset:

```{r, echo = FALSE}
unique(dat_all$waterbody)
```

##### Stations in dataset:

```{r, echo = FALSE}
unique(dat_all$station)
```

##### Stations which may have experienced air exposure:

 - Liscomb 1
 - Liscomb 2
 - LaHave 2
 - Mersey 2
 - Tusket 3
 - Possibly Musquodoboit 1 and 2

# Station Locations

Approximate location of stations included in analysis.

```{r}
#| fig-height: 6

# interactive map
leaflet(st_locations) %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addCircleMarkers(
    data = st_locations,
    lng = ~longitude, lat = ~latitude, label = ~station,
    weight = 1,
    color = "black",
    fillOpacity = 0.75,
    radius = 5
  ) %>% 
  addScaleBar(
    position = "bottomleft", 
    options = scaleBarOptions(imperial = FALSE)
  ) %>%
  addProviderTiles("Esri.WorldTopoMap")
  #addProviderTiles(providers$CartoDB.Positron)

```


# Plot all Station Data

::: panel-tabset
```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5

for (i in list) {
  dat_i <- dat_all %>%
    filter(station == i)
  
  cat(paste("### ", i, "\n \n"))
  
  print(
    ggplot(
      dat_i,
      aes(x = timestamp_utc, y = temperature_degree_c, col = station)
    ) +
      geom_line(color = "black", linewidth = 0.75) +
      facet_grid(vars(station)) +
      ggtitle(i) +
      ylim(10, 30)
  )
  
  cat("\n\n")
}
```
:::


# General deployment stats
```{r}
#percent observations flagged
summary_all1 <- dat_all %>%
  group_by(station) %>%
  summarise(
    n_obs = n(),
    mean = mean(temperature_degree_c),
    max = max(temperature_degree_c),
    min = min(temperature_degree_c)
  ) %>%
  ungroup()



summary_all1 %>%
  datatable(rownames = FALSE, options = dt_options)
```


# Apply QC Flags - preliminary

```{r}
#| warning: false
#| message: false
#| echo: false
#| results: asis
#| fig-height: 5
#| fig-width: 8

q = "q_997"

thresholds[16,7] = threshold_value_sd


sd_roll_applied_all <- qc_test_rolling_sd(dat_all, county = "river_data")


#percent observations flagged
summary_all <- sd_roll_applied_all %>%
  group_by(station) %>%
  summarise(
    n_obs = n(),
    n_suspect = sum(rolling_sd_flag_temperature_degree_c == 3)
  ) %>%
  mutate(percent_suspect = round((100 * n_suspect / n_obs), digits = 3)) %>%
  mutate(threshold = threshold_value_sd) %>%
  mutate(q = q) %>%
  ungroup()



summary_all %>%
  datatable(rownames = FALSE, options = dt_options)

```




::: panel-tabset
```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5

flagged_dat_all <- sd_roll_applied_all

for (i in list) {
  dat_i <- dat_all %>%
    filter(station == i)
  
cat(paste("### ", i, "\n \n"))
  
#apply test
qc_i <- qc_test_rolling_sd(dat_i, county = "river_data")

#plot
qc2_i <- qc_pivot_longer(qc_i, qc_tests = "rolling_sd")
p <- qc_plot_flags(qc2_i, qc_tests = "rolling_sd", var = "temperature_degree_c")
print(p$temperature_degree_c$rolling_sd)


cat("\n\n")
}
```
:::


Plotly of singular station
```{r}
station_view <- "North River 1"

p <- ggplot(
  flagged_dat_all %>% filter(station == station_view),
  aes(x = timestamp_utc, y = temperature_degree_c, col = rolling_sd_flag_temperature_degree_c)
) +
  ggtitle(station_view) +
  geom_point(size = 0.7) + scale_color_manual(values=c("darkgreen", "black", "orange"))

ggplotly(p)
```
