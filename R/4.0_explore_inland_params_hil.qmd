---
title: "Flagging Inland Data - Explore Human in the Loop"
format:
  html:
    toc: true
    toc-depth: 3
    embed-resources: true
editor_options: 
  chunk_output_type: console
---
# Summary

CMAR has collected data on several inland bodies of freshwater in Nova Scotia, including lakes and rivers.

CMAR intends to process and publish all inland data under a new "Inland" branch of the [Coastal Monitoring Program](https://cmar.ca/coastal-monitoring-program/#station). Data will be processed in a similar manner to the coastal water quality data, and data flags will be applied using the [qaqcmar](https://github.com/dempsey-CMAR/qaqcmar) package. 

It is suspected that sensors on some rivers were out of the water for some period of time during the deployment due to low water levels. Data flagging efforts will flag data for periods of time sensors were suspected to be exposed. During the periods in which sensors were exposed to air, recorded temperatures fluctuate more quickly than when sensors are submerged. 

The purpose of this document is to help CMAR determine appropriate data flagging tests and thresholds for freshwater (inland) data. We do not currently have enough freshwater data to conduct as thorough an analysis as was done on the coastal water quality data to develop tests and thresholds, so thresholds may be picked in more subjective ways. Note, this initial threshold analysis has been completed on a subset of data.

Use this document to apply grossrange and rollingsd flags to one inland dataset at a time, and visualize flagged plots. Explore the need for additional human in the loop flags based on the maxmium combined flag output.

```{r setup, include = FALSE}
knitr::opts_chunk$set(echo = FALSE)

library(dplyr)
library(tidyr)
library(data.table)
library(qaqcmar)
library(here)
library(ggplot2)
library(sensorstrings)
library(summaryplots)
library(plotly)
library(DT)
library(leaflet)
library(zoo)

# load CMAR river data
dat_all <- readRDS(here("data/2024-12-02_inland_data_raw.rds"))

unique(dat_all$station)

# look at flags for one station at a time
station_i <- "Tusket River 3"

dat_i <- dat_all %>% filter(station == station_i)

# OPTIONAL
# import precipitation data
#for meteghan
# weather_data <- read.csv("C:/Users/Nicole Torrie/Documents/R/cmp_code/inland_thresholds_analysis/data/en_climate_daily_NS_8200604_2024_P1D_digby.csv")

#for north
# weather_data <- read.csv("C:/Users/Nicole Torrie/Documents/R/cmp_code/inland_thresholds_analysis/data/en_climate_daily_NS_8204154_2024_P1D_margaree.csv")


```

### This document pertains to the following station:
```{r}
unique(dat_i$station)

# generate station location dataset for threshold analysis
st_locations <- dat_i %>%
  distinct(latitude, .keep_all = TRUE)

```

# Data Visualization
## Station location

Approximate location of stations included in thresholds analysis.

```{r}
#| fig-height: 6

# interactive map
leaflet(st_locations) %>% 
  addProviderTiles(providers$CartoDB.Positron) %>% 
  addCircleMarkers(
    data = st_locations,
    lng = ~longitude, lat = ~latitude, label = ~station,
    weight = 1,
    color = "black",
    fillOpacity = 0.75,
    radius = 5
  ) %>% 
  addScaleBar(
    position = "bottomleft", 
    options = scaleBarOptions(imperial = FALSE)
  ) %>%
  addProviderTiles("Esri.WorldTopoMap")
  #addProviderTiles(providers$CartoDB.Positron)

```

```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5

# Set up to run tests
# thresholds have not been derived statistically for atypical stations
atypical_stations <- c("Hourglass Lake", "Sissiboo River", "Piper Lake", "Mersey River 3")

if (station_i %in% atypical_stations) {
  thresholds <-
    read.csv(
      here("thresholds_inland_atypical.csv")
    )
} else{
  thresholds <-
    read.csv(
      here("thresholds_inland.csv")
    )
}

# if sensor depth was not measured, do not run qc_test_depth_crosscheck
vars <- dat_i %>% 
  ss_pivot_longer() %>% 
  distinct(variable)

vars <- sort(vars$variable)


if("sensor_depth_measured_m" %in% vars) {
  qc_tests = c(
    "grossrange", "rolling_sd", "depth_crosscheck"
  )
   join_column_spike <- "sensor_type"
} else{
  qc_tests = c("grossrange", "rolling_sd")
  
  join_column_spike <- NULL
}


# apply grossrange, depth, and rollingsd tests
dat_qc <- dat_i %>% 
  qc_test_all(qc_tests = qc_tests, join_column_spike = join_column_spike)

# assign maximum flag
dat_qc_flag_max <- dat_qc %>% 
  qc_assign_max_flag(qc_tests = qc_tests)

```


## Plot grossrange flags
```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5

p <- qc_plot_flags(dat_qc_flag_max, qc_tests = qc_tests, var = "temperature_degree_c")

print(p$temperature_degree_c$grossrange)
```

## Plot rollingsd flags
```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5

print(p$temperature_degree_c$rolling_sd)
```

## Plot maximum combined flags
Use this interactive plot to determine whether additional human-in-the-loop flags are needed
```{r}
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5

q <- ggplot(
  dat_qc_flag_max,
  aes(x = timestamp_utc, y = temperature_degree_c, 
      col = qc_flag_temperature_degree_c)) +
  ggtitle(station_i) +
  geom_point(size = 0.7) + 
  scale_color_manual(breaks = c("1", "2", "3", "4"),
                     values = c("darkgreen", "darkgray", "orange", "red"))

ggplotly(q)

```

Update the tracking sheet at:

`"R:\tracking_sheets\2024-10-17_inland_water_quality_human_in_loop_tracking.xlsx"` 

to add human in the loop flags. Your thresholds analysis is complete.


## Bonus precipitation data:
**Note, you MUST update the path to the relevant weather station data if interested in using this section**

Plot rainfall data to help determine periods of potential sensor drying, or explain other data signals.

Download weather data from nearby government weather stations: https://climate.weather.gc.ca/historical_data/search_historic_data_e.html

Use the **daily** data interval and download the .csv with daily data for the year of your deployment.

Note potential axis differences in the below data plots.

Add brackets back in around the r ("{r}") in the code chunk header below to use the code

```r
#| warning: false
#| message: false
#| results: asis
#| fig-height: 5


#convert datetime to posixct if time is included in the column, otherwise, as.Date works
weather_data$Date.Time <- as.Date(weather_data$Date.Time, '%Y-%m-%d') 

date_start <- min(dat_qc_flag_max$timestamp_utc)
date_end <- max(dat_qc_flag_max$timestamp_utc)

#set to a few days before the deployment start if needed
#date_start <- '2024-06-05' 

weather_data2 <-
  weather_data %>% filter(Date.Time > date_start &
                            Date.Time < date_end)

title <- paste(weather_data2$Station.Name[1], "WEATHER STATION")

r <- ggplot(weather_data2, aes(Date.Time, Total.Precip..mm.)) +
  geom_line() +
  ggtitle(title)
ggplotly (r)

s <- ggplot(dat_qc_flag_max, aes(timestamp_utc, temperature_degree_c)) +
  geom_line() +
  ggtitle(station_i)
ggplotly (s)

```
